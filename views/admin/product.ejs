<%- include("../../views/partials/admin/header") %>

  <!-- SweetAlert2 -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <!-- Cropper.js CSS & JS -->
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>

  <style>
    @media (min-width: 768px) {
      .col-custom-5 {
        width: 20%;
        flex: 0 0 auto;
      }
    }

    #currentImages img {
      height: 60px;
      margin-right: 10px;
      position: relative;
      cursor: pointer;
      border-radius: 4px;
      border: 1px solid #ddd;
    }

    .image-wrapper {
      position: relative;
      display: inline-block;
      margin-right: 10px;
      margin-bottom: 5px;
    }

    .delete-image-btn {
      position: absolute;
      top: 2px;
      right: 2px;
      background: rgba(255, 255, 255, 0.8);
      border-radius: 50%;
      padding: 0 6px;
      cursor: pointer;
      font-weight: bold;
      color: red;
      font-size: 16px;
      line-height: 1;
    }
  </style>

  <div class="container mt-4">
    <div class="mb-3">
      <h4>Products</h4>
    </div>



    <!-- Offer Form Section -->
    <!-- Offer Form -->
    <div class="card p-4 mb-4 shadow rounded-3">
      <h4>Create Product Offer</h4>
      <form id="offerForm">
        <!-- Product Selection -->
        <div class="mb-3">
          <label for="productId" class="form-label">Select Product</label>
          <select class="form-select" id="productId" name="productId" required>
            <% products.forEach(product=> { %>
              <option value="<%= product._id %>">
                <%= product.productName %>
              </option>
              <% }) %>
          </select>
        </div>

        <!-- Discount Percentage -->
        <div class="mb-3">
          <label for="discountPercent" class="form-label">Discount Percentage (%)</label>
          <input type="number" class="form-control" id="discountPercent" name="discountPercentage" min="1" max="100"
            required>
        </div>

        <!-- Start Date -->
        <div class="mb-3">
          <label for="startDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="startDate" name="startDate" required>
        </div>

        <!-- End Date -->
        <div class="mb-3">
          <label for="endDate" class="form-label">End Date</label>
          <input type="date" class="form-control" id="endDate" name="endDate" required>
        </div>

        <!-- Submit Button -->
        <button type="submit" class="btn btn-success">Create Offer</button>
      </form>
    </div>





    <!-- Search Form -->
    <form class="mb-4" method="GET" action="/admin/products">
      <div class="input-group">
        <input type="text" class="form-control" name="search" placeholder="Search product..."
          value="<%= typeof search !== 'undefined' ? search : '' %>">
        <button class="btn btn-outline-secondary" type="submit">Search</button>

        <a href="/admin/products" class="btn btn-outline-danger">Clear</a>
      </div>
    </form>

    <!-- Product Table -->
<div class="table-responsive">
  <table class="table table-bordered align-middle text-center">
    <thead class="table-light">
      <tr>
        <th>Image</th>
        <th>Name</th>
        <th>Price (£)</th>
        <th>Final Price (£)</th> <!-- NEW -->
        <th>Category</th>
        <th>Quantity & Unit</th>
        <th>Stock</th>
         <th>Discount (%)</th>
        <th>Offer</th> <!-- Changed from "Discount (%)" -->
        <th>Status</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <% products.forEach(product => { %>
        <tr>
          <td><img src="<%= product.productImage[0] %>" alt="Product" style="height: 60px; object-fit: cover;"></td>
          
          <td><%= product.productName %></td>

          <td><%= product.price %></td>
          
<td>
  <% if (product.appliedDiscount > 0) { %>
    <span class="text-success fw-bold">£<%= product.finalPrice %></span><br>
    <small class="text-muted"><%= product.appliedDiscount %>% off (<%= product.discountSource %>)</small>
  <% } else { %>
    <span>£<%= product.originalPrice.toFixed(2) %></span>
  <% } %>
</td>

          <td><%= product.category ? product.category.name : 'No Category' %></td>

          <td><%= product.productQuantity %> <%= product.unit %></td>

          <td><%= product.stock %></td>
           <td>
                <%= product.discount %>
              </td>

          <!-- Offer Column -->

          <td>
  <% if (product.productOffer?.discountPercentage > 0) { %>
    <span>
      <strong><%= product.productOffer.discountPercentage %>%</strong> (Product Offer)
      <% if (product.discountSource === 'Product Offer') { %>
        <span class="badge bg-success ms-1">Applied</span>
      <% } else { %>
        <span class="badge bg-secondary ms-1">Not Applied</span>
      <% } %>
    </span><br>

    <button class="btn btn-sm btn-info my-1"
      onclick="openEditOfferModal('<%= product._id %>', '<%= product.productOffer.discountPercentage %>', 
      '<%= product.productOffer.startDate.toISOString().substring(0,10) %>', 
      '<%= product.productOffer.endDate.toISOString().substring(0,10) %>')">Edit</button>
    <button class="btn btn-sm btn-danger" onclick="deleteOffer('<%= product._id %>')">Delete</button>
  <% } %>

  <% if (product.category?.categoryOffer?.discountPercentage > 0) { %>
    <br>
    <span>
      <strong><%= product.category.categoryOffer.discountPercentage %>%</strong> (Category Offer)
      <% if (product.discountSource === 'Category Offer') { %>
        <span class="badge bg-success ms-1">Applied</span>
      <% } else { %>
        <span class="badge bg-secondary ms-1">Not Applied</span>
      <% } %>
    </span>
  <% } %>

  <% if (!product.productOffer?.discountPercentage && !product.category?.categoryOffer?.discountPercentage) { %>
    <span class="text-muted">No Offer</span>
  <% } %>
</td>







          <!-- Availability Status -->
          <td>
            <% if (product.isBlocked) { %>
              <span class="badge bg-danger">Blocked</span>
            <% } else if (product.stock === 0) { %>
              <span class="badge bg-warning text-dark">Out of Stock</span>
            <% } else { %>
              <span class="badge bg-success">Available</span>
            <% } %>
          </td>

          <!-- Action Buttons -->
          <td class="d-flex justify-content-center align-items-center">
            <div class="d-flex flex-column align-items-center gap-1">

              <button class="btn btn-success btn-sm w-fixed" style="width: 80px;"
                data-product="<%= encodeURIComponent(JSON.stringify(product)) %>"
                onclick="openEditModalFromButton(this)">Edit</button>

              <button class="btn btn-danger btn-sm w-fixed" style="width: 80px;"
                onclick="confirmDelete('<%= product._id %>')">Delete</button>

              <button class="btn btn-sm <%= product.isBlocked ? 'btn-info' : 'btn-warning' %>" style="width: 80px;"
                onclick="toggleBlockStatus('<%= product._id %>')">
                <%= product.isBlocked ? 'Unblock' : 'Block' %>
              </button>

           <button class="btn btn-sm <%= product.isListed ? 'btn-primary' : 'btn-secondary' %> d-flex justify-content-center align-items-center"
        style="width: 80px;"
        onclick="toggleListStatus('<%= product._id %>')">
  <%= product.isListed ? 'Unlist' : 'List' %>
</button>


            </div>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>
</div>


  <!-- Pagination -->
  <div class="d-flex justify-content-center mt-4">
    <nav>
      <ul class="pagination">
        <% for (let i=1; i <=totalPages; i++) { %>
          <li class="page-item <%= currentPage == i ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>">
              <%= i %>
            </a>
          </li>
          <% } %>
      </ul>
    </nav>
  </div>
  </div>

  <!-- Edit Product Modal -->
  <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <form id="productForm" method="POST" enctype="multipart/form-data">
          <input type="hidden" name="productId" id="productId">
          <div class="modal-header">
            <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
              id="closeModalBtn"></button>
          </div>

          <div class="modal-body">
            <!-- Product Fields -->
            <div class="mb-3">
              <label class="form-label">Product Name</label>
              <input type="text" class="form-control" id="productName" name="productName">
            </div>

            <div class="mb-3">
              <label class="form-label">Price</label>
              <input type="number" class="form-control" id="price" name="price" min="0" step="0.01">
            </div>

            <div class="mb-3">
              <label class="form-label">Stock</label>
              <input type="number" class="form-control" id="stock" name="stock">
            </div>

            <div class="mb-3">
              <label class="form-label">Discount (%)</label>
              <input type="number" class="form-control" id="discount" name="discount">
            </div>

            <div class="row">
              <div class="mb-3 col-md-6">
                <label class="form-label">Quantity</label>
                <input type="number" class="form-control" id="quantity" name="quantity" min="1" placeholder="e.g., 100">
              </div>

              <div class="mb-3 col-md-6">
                <label class="form-label">Unit</label>
                <select class="form-select" id="unit" name="unit">
                  <option selected disabled value="">Select Unit</option>
                  <option value="g">Gram (g)</option>
                  <option value="kg">Kilogram (kg)</option>
                  <option value="ml">Millilitre (ml)</option>
                  <option value="litre">Litre</option>
                  <option value="pcs">Pieces</option>
                  <option value="pack">Packet</option>
                </select>
              </div>
            </div>

            <div class="mb-3">
              <label class="form-label">Category</label>
              <select class="form-select" name="categoryId" id="categoryId">
                <% categories.forEach(category=> { %>
                  <option value="<%= category._id %>">
                    <%= category.name %>
                  </option>
                  <% }) %>
              </select>
            </div>



            <div class="mb-3">
              <label class="form-label">Description</label>
              <textarea class="form-control" id="description" name="description" rows="3"></textarea>
            </div>


            <div class="mb-3">
              <label class="form-label">Product Images</label>
              <input type="file" class="form-control" id="newImageInput" multiple accept="image/*">
            </div>

            <div id="currentImages" class="mb-3 d-flex flex-wrap gap-2"></div>
          </div>

          <div class="modal-footer">
            <button type="submit" class="btn btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Cropper Modal -->
  <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
            id="cropperCloseBtn"></button>
        </div>
        <div class="modal-body d-flex justify-content-center">
          <img id="cropperImage" style="max-width:100%; max-height: 70vh; display: block;">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" id="cancelCropBtn">Cancel</button>
          <button type="button" class="btn btn-primary" id="cropImageBtn">Crop & Add</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Offer Modal -->
<div class="modal fade" id="editOfferModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content p-3">
      <h5>Edit Product Offer</h5>
      <form id="editOfferForm">
        <input type="hidden" id="editProductId">

        <label>Discount (%)</label>
        <input type="number" id="editDiscount" class="form-control mb-2" min="1" max="100" required>

        <label>Start Date</label>
        <input type="date" id="editStartDate" class="form-control mb-2" required>

        <label>End Date</label>
        <input type="date" id="editEndDate" class="form-control mb-3" required>

        <button type="submit" class="btn btn-success">Update Offer</button>
      </form>
    </div>
  </div>
</div>


  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>function openEditOfferModal(productId, discount, startDate, endDate) {
  document.getElementById('editProductId').value = productId;
  document.getElementById('editDiscount').value = discount;
  document.getElementById('editStartDate').value = startDate;
  document.getElementById('editEndDate').value = endDate;
  new bootstrap.Modal(document.getElementById('editOfferModal')).show();
}
</script>

<script>
  document.getElementById('editOfferForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  const productId = document.getElementById('editProductId').value;
  const discountPercentage = document.getElementById('editDiscount').value;
  const startDate = document.getElementById('editStartDate').value;
  const endDate = document.getElementById('editEndDate').value;

  try {
    const res = await fetch(`/admin/product-offers/${productId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ discountPercentage, startDate, endDate })
    });

    const data = await res.json();
if (data.success) {
  Swal.fire({
    icon: 'success',
    title: 'Success',
    text: 'Offer updated',
    timer: 1500,
    showConfirmButton: false
  }).then(() => {
    window.location.reload();
  });
} else {
  Swal.fire({
    icon: 'error',
    title: 'Error',
    text: data.message
  });
}
  } catch (err) {
  console.error(err);
  Swal.fire({
    icon: 'error',
    title: 'Oops...',
    text: 'Something went wrong!'
  });
}

});

</script>
<script>
async function deleteOffer(productId) {
  const result = await Swal.fire({
    title: 'Are you sure?',
    text: 'This will permanently delete the offer.',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'Cancel'
  });

  if (!result.isConfirmed) return;

  try {
    const res = await fetch(`/admin/product-offers/${productId}`, {
      method: 'DELETE'
    });

    const data = await res.json();

    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Deleted!',
        text: 'Offer deleted successfully.',
        timer: 1500,
        showConfirmButton: false
      }).then(() => {
        window.location.reload();
      });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: data.message
      });
    }
  } catch (err) {
    console.error(err);
    Swal.fire({
      icon: 'error',
      title: 'Oops...',
      text: 'Something went wrong'
    });
  }
}


</script>
  <!-- JavaScript to handle form submission -->
  <script>
    document.getElementById('offerForm').addEventListener('submit', async function (e) {
      e.preventDefault();

      const productId = document.getElementById('productId').value;
      const discountPercentage = document.getElementById('discountPercent').value;
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;

      try {
        const res = await fetch('/admin/product-offers', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            productId,  // 👈 include productId here
            isActive: true,
            discountPercentage,
            startDate,
            endDate
          })
        });

        const data = await res.json();

         if (data.success) {
    Swal.fire({
      icon: 'success',
      title: 'Success',
      text: 'Offer created successfully!',
      timer: 1500,
      showConfirmButton: false
    }).then(() => {
      window.location.reload();
    });
  } else {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: data.message
    });
  }
      } catch (error) {
  console.error(error);
  Swal.fire({
    icon: 'error',
    title: 'Oops...',
    text: 'Something went wrong'
  });
}
    });
  </script>

  <script>
    const editProductModal = new bootstrap.Modal(document.getElementById('editProductModal'));
    const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
    let cropper = null;

    // Store images currently in preview:
    // For existing images: store URLs
    // For new images: store objects {file, dataURL} with cropped image data
    let currentImages = []; // each item: { type: 'existing', url } or { type: 'new', file }

    function openEditModalFromButton(button) {
      const product = JSON.parse(decodeURIComponent(button.dataset.product));
      openEditModal(product);
    }

    function openEditModal(product) {
      document.getElementById('editProductModalLabel').innerText = `Edit Product - ${product.productName}`;
      document.getElementById('productId').value = product._id;
      document.getElementById('productName').value = product.productName;
      document.getElementById('price').value = product.price;
      document.getElementById('stock').value = product.stock;
      document.getElementById('discount').value = product.discount;
      document.getElementById('categoryId').value = product.category._id;
      // document.getElementById('brandId').value = product.brand || '';
      document.getElementById('description').value = product.description || '';
      document.getElementById('quantity').value = product.productQuantity || '';
      document.getElementById('unit').value = product.unit || '';


      // Reset images preview and array
      currentImages = [];
      const currentImagesDiv = document.getElementById('currentImages');
      currentImagesDiv.innerHTML = '';

      // Add existing images to preview & currentImages array
      product.productImage.forEach(url => {
        addExistingImage(url);
      });

      // Show modal
      editProductModal.show();
    }

    function addExistingImage(url) {
      currentImages.push({ type: 'existing', url });

      const wrapper = document.createElement('div');
      wrapper.className = 'image-wrapper';

      const img = document.createElement('img');
      img.src = url;
      img.alt = 'Existing Image';

      const deleteBtn = document.createElement('span');
      deleteBtn.className = 'delete-image-btn';
      deleteBtn.textContent = '×';
      deleteBtn.title = 'Delete Image';
      deleteBtn.onclick = () => {
        // Remove from currentImages
        currentImages = currentImages.filter(imgObj => !(imgObj.type === 'existing' && imgObj.url === url));
        wrapper.remove();
      };

      wrapper.appendChild(img);
      wrapper.appendChild(deleteBtn);

      document.getElementById('currentImages').appendChild(wrapper);
    }

    // For new images, we add cropped ones:
    function addNewImage(file, dataURL) {
      currentImages.push({ type: 'new', file, dataURL });

      const wrapper = document.createElement('div');
      wrapper.className = 'image-wrapper';

      const img = document.createElement('img');
      img.src = dataURL;
      img.alt = 'New Image';

      const deleteBtn = document.createElement('span');
      deleteBtn.className = 'delete-image-btn';
      deleteBtn.textContent = '×';
      deleteBtn.title = 'Delete Image';
      deleteBtn.onclick = () => {
        currentImages = currentImages.filter(imgObj => !(imgObj.type === 'new' && imgObj.file === file));
        wrapper.remove();
      };

      wrapper.appendChild(img);
      wrapper.appendChild(deleteBtn);

      document.getElementById('currentImages').appendChild(wrapper);
    }

    // Handle new image file input change (for cropping)
    const newImageInput = document.getElementById('newImageInput');
    newImageInput.addEventListener('change', (e) => {


      const files = Array.from(e.target.files);
      if (files.length > 0) {
        // Start cropping the first file
        startCrop(files[0]);
      }
      // Clear input for next use
      newImageInput.value = '';
    });

    // Cropper modal image and buttons
    const cropperImage = document.getElementById('cropperImage');
    const cropImageBtn = document.getElementById('cropImageBtn');
    const cancelCropBtn = document.getElementById('cancelCropBtn');
    const cropperCloseBtn = document.getElementById('cropperCloseBtn');

    let cropFileToAdd = null;

    function startCrop(file) {
      const reader = new FileReader();
      reader.onload = () => {
        cropperImage.src = reader.result;
        cropFileToAdd = file;
        cropperModal.show();

        if (cropper) cropper.destroy();

        cropper = new Cropper(cropperImage, {
          aspectRatio: 1,
          viewMode: 1,
          movable: true,
          zoomable: true,
          rotatable: false,
          scalable: false,
          autoCropArea: 1,
        });
      };
      reader.readAsDataURL(file);
    }

    cropImageBtn.addEventListener('click', () => {
      if (!cropper) return;

      cropper.getCroppedCanvas().toBlob(blob => {
        const croppedFile = new File([blob], cropFileToAdd.name, { type: cropFileToAdd.type });

        // Create a Data URL for preview
        const reader = new FileReader();
        reader.onload = () => {
          addNewImage(croppedFile, reader.result);
          cropperModal.hide();
          cropper.destroy();
          cropper = null;

          // Check if more files in queue (if multiple uploads desired)
          // For now, just one at a time.
        };
        reader.readAsDataURL(croppedFile);
      }, cropFileToAdd.type || 'image/png');
    });

    cancelCropBtn.addEventListener('click', () => {
      cropperModal.hide();
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
    });

    cropperCloseBtn.addEventListener('click', () => {
      cropperModal.hide();
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
    });

    // Confirm delete product
    function confirmDelete(productId) {
      Swal.fire({
        title: 'Are you sure?',
        text: "This will delete the product!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/product-delete/${productId}`, {
            method: 'POST'
          })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                Swal.fire({
                  icon: 'success',
                  title: data.success,
                  showConfirmButton: false,
                  timer: 1500
                }).then(() => location.reload());
              } else {
                Swal.fire("Error", data.message || "Failed to delete product", "error");
              }
            })
            .catch(() => {
              Swal.fire("Error", "Unable to delete the product", "error");
            });
        }
      });
    }


    // Handle toggle block/unblock submit
    function handleToggleSubmit(event) {
      event.preventDefault();
      const form = event.target;

      fetch(form.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams(new FormData(form))
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: data.success,
              showConfirmButton: false,
              timer: 1500
            }).then(() => location.reload());
          } else {
            Swal.fire("Error", data.message || "Update failed", "error");
          }
        })
        .catch(() => {
          Swal.fire("Error", "Unable to update status", "error");
        });
    }


    // Submit edited product form with AJAX including images
    document.getElementById('productForm').addEventListener('submit', async (event) => {
      event.preventDefault();

      const form = event.target;
      const productId = document.getElementById('productId').value;

      const formData = new FormData();

      formData.append('productName', document.getElementById('productName').value);
      formData.append('price', document.getElementById('price').value);
      formData.append('stock', document.getElementById('stock').value);
      formData.append('discount', document.getElementById('discount').value);
      formData.append('categoryId', document.getElementById('categoryId').value);
      // formData.append('brandId', document.getElementById('brandId').value);
      formData.append('description', document.getElementById('description').value);
      formData.append('quantity', document.getElementById('quantity').value);
      formData.append('unit', document.getElementById('unit').value);


      // For images:
      // Existing images are sent as URLs in a JSON string named 'existingImages'
      // New images (cropped files) appended as files with name 'newImages'
      const existingImagesUrls = currentImages
        .filter(imgObj => imgObj.type === 'existing')
        .map(imgObj => imgObj.url);

      formData.append('existingImages', JSON.stringify(existingImagesUrls));

      currentImages
        .filter(imgObj => imgObj.type === 'new')
        .forEach((imgObj, idx) => {
          formData.append('newImages', imgObj.file);
        });

      try {
        const res = await fetch(`/admin/product-edit/${productId}`, {
          method: 'POST',
          body: formData,
        });

        if (res.ok) {
          Swal.fire('Success', 'Product updated successfully!', 'success').then(() => {
            location.reload();
          });
        } else {
          const errorData = await res.json();
          Swal.fire('Error', errorData.message || 'Failed to update product', 'error');
        }
      } catch (error) {
        Swal.fire('Error', error.message || 'Failed to update product', 'error');
      }
    });
    async function toggleBlockStatus(productId) {
      try {
        const response = await fetch(`/admin/product-isBlocked/${productId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' }
          // You can send a body if needed, e.g. { isBlocked: true/false }
        });

        if (response.ok) {
          // Reload or update UI accordingly
          window.location.reload();
        } else {
          const error = await response.text();
          alert('Error toggling block status: ' + error);
        }
      } catch (err) {
        alert('Network error: ' + err.message);
      }
    }

    async function toggleListStatus(productId) {
      try {
        const response = await fetch(`/admin/product-isListed/${productId}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' }
          // Send body if needed
        });

        if (response.ok) {
          window.location.reload();
        } else {
          const error = await response.text();
          alert('Error toggling list status: ' + error);
        }
      } catch (err) {
        alert('Network error: ' + err.message);
      }
    }

  </script>

  <%- include("../../views/partials/admin/footer") %>